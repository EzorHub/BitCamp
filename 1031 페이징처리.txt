		var pageSIZE = 5;		//한 페이지당 보여줄 레코드 수
		var pageGROUP = 5;		//한 화면에 보여줄 페이지수
		var totalRecord = 0;		//전체 레코드 수
		var totalPage = 1; 		//전체 페이지 수
		
		//전체 레코드 수 구하기
		$.ajax({url:"countCafePassSale", data:{cafe_no:cafe_no}, async:false,
			success:function(data) {
			totalRecord = data;
		}});
		
		totalPage = parseInt(totalRecord / pageSIZE);
		if(totalRecord % pageSIZE !=0) {
			totalPage++;
		}
		
		var currentPage = 1;
		var start = (currentPage-1) * pageSIZE +1;
		var end = currentPage * pageSIZE;
		
		//화면에 리스트, pagination 뿌리기 
		listCafePassSale(cafe_no, start, end);
		paging();


//리스트 뽑아오는 메소드
function listCafePassSale(cafe_no, start, end) {
			$("#tb").empty();
			$.ajax({url:"listCafePassSale",
				data:{"cafe_no":cafe_no, "start":start, "end":end }, dataType : "json", async:false,
				success:function(data) {
					$.each(data, function(idx, item) {
						var tr = $("<tr></tr>");
						var td1 = $("<td></td>").html(item.pay_no);
						var td2 = $("<td></td>").html(item.product);
						var td3 = $("<td></td>").html(item.totalprice);
						var td4 = $("<td></td>").html(item.id);
						
						$(tr).append(td1,td2,td3,td4);
						$("#tb").append(tr);
					});
			}});	
		}



//페이지 출력 하는 메소드
		function paging() {
			$("#pagination").empty();
			$("#btn_prev").empty();
			$("#btn_next").empty();
			//한 화면에 보여줄 시작페이지, 끝페이지 구하기
			var startPage = parseInt(currentPage/pageGROUP) * pageGROUP + 1;
			if(currentPage % 5 == 0) {
				startPage = (parseInt(currentPage/pageGROUP)-1) * pageGROUP + 1;
			}
			var endPage = startPage + pageGROUP - 1;
			
			if(endPage > totalPage) {
				endPage = totalPage;
			}
	
			for(var i=startPage; i<=endPage; i++) {
				var a = $("<a style='margin-right:8px;'>"+i+"</a>");
				$("#pagination").append(a);
			}

			$("a").click(function() {
				currentPage = $(this).html();
				start = (currentPage-1) * pageSIZE +1;
				end = currentPage * pageSIZE;
				listCafePassSale(cafe_no, start, end);
				paging();
			});
			
			if(currentPage > pageGROUP) {
				var btn_prev = $("<button class='btn-primary' style='padding:5px; border-radius: 10px;'>이전</button>");
				$("#btn_prev").append(btn_prev);
				$(btn_prev).click(function() {
					currentPage = startPage - 1;
					start = (currentPage-1) * pageSIZE +1;
					end = currentPage * pageSIZE;
					listCafePassSale(cafe_no, start, end);
					paging();
				});
			}
			
			if(currentPage < totalPage && endPage+1<=totalPage) {
				var btn_next = $("<button class='btn-primary' style='padding:5px; border-radius: 10px;'>다음</button>");
				$("#btn_next").append(btn_next);
				$(btn_next).click(function() {
					currentPage = endPage + 1;
					start = (currentPage-1) * pageSIZE +1;
					end = currentPage * pageSIZE;
					listCafePassSale(cafe_no, start, end);
					paging();
				});
			}
		}


//====================================================================================================
[ 컨트롤러 ]

@ResponseBody
	@RequestMapping("/countCafePassSale")
	public int countCafePassSale(int cafe_no) {
		int re = -1;
		re = user_dao.countCafePassSale(cafe_no);
		return re;
	}


@ResponseBody
	@RequestMapping("/listCafePassSale")
	public String listCafePassSale(int cafe_no, int start, int end) {
		String str = "";
		try {
			ObjectMapper mapper = new ObjectMapper();
			str = mapper.writeValueAsString(user_dao.listCafePassSale(cafe_no, start, end));
		}catch (Exception e) {
			System.out.println(e.getMessage());
		}
		return str;
	}


